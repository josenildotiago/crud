import * as React from 'react';
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Moon, Sun, Monitor, ChevronDown, ChevronUp } from 'lucide-react';
import { useAppearance } from '@/hooks/use-appearance';
import { themes } from '@/lib/themes';

export default function AppearanceTabs() {
    const { appearance, themeId, updateAppearance, updateTheme } = useAppearance();
    const [showThemes, setShowThemes] = useState(false);

    const getThemePreviewColor = (theme: typeof themes[0]) => {
        const primaryColor = theme.variables.light['--primary'];
        return primaryColor;
    };

    return (
        <Card>
            <CardHeader>
                <CardTitle>Aparência</CardTitle>
                <CardDescription>
                    Personalize a aparência do aplicativo. Escolha entre modo claro, escuro ou automático.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                <div>
                    <h4 className="text-sm font-medium mb-3">Modo de Aparência</h4>
                    <Tabs value={appearance} onValueChange={(value) => updateAppearance(value as any)}>
                        <TabsList className="grid w-full grid-cols-3">
                            <TabsTrigger value="light" className="flex items-center gap-2">
                                <Sun className="h-4 w-4" />
                                Claro
                            </TabsTrigger>
                            <TabsTrigger value="dark" className="flex items-center gap-2">
                                <Moon className="h-4 w-4" />
                                Escuro
                            </TabsTrigger>
                            <TabsTrigger value="system" className="flex items-center gap-2">
                                <Monitor className="h-4 w-4" />
                                Sistema
                            </TabsTrigger>
                        </TabsList>
                        <TabsContent value="light" className="mt-4">
                            <p className="text-sm text-muted-foreground">
                                O aplicativo sempre usará o modo claro, independente das configurações do sistema.
                            </p>
                        </TabsContent>
                        <TabsContent value="dark" className="mt-4">
                            <p className="text-sm text-muted-foreground">
                                O aplicativo sempre usará o modo escuro, independente das configurações do sistema.
                            </p>
                        </TabsContent>
                        <TabsContent value="system" className="mt-4">
                            <p className="text-sm text-muted-foreground">
                                O aplicativo seguirá as configurações do seu sistema operacional.
                            </p>
                        </TabsContent>
                    </Tabs>
                </div>

                <div>
                    <div className="flex items-center justify-between mb-3">
                        <h4 className="text-sm font-medium">Tema de Cores</h4>
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setShowThemes(!showThemes)}
                        >
                            {showThemes ? (
                                <>
                                    <ChevronUp className="h-4 w-4 mr-1" />
                                    Ocultar
                                </>
                            ) : (
                                <>
                                    <ChevronDown className="h-4 w-4 mr-1" />
                                    Mostrar temas
                                </>
                            )}
                        </Button>
                    </div>
                    
                    {showThemes && (
                        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                            {themes.map((theme) => (
                                <button
                                    key={theme.id}
                                    onClick={() => updateTheme(theme.id)}
                                    className={`p-3 rounded-lg border-2 transition-all hover:scale-105 ${
                                        themeId === theme.id
                                            ? 'border-primary ring-2 ring-primary ring-offset-2'
                                            : 'border-border hover:border-border/80'
                                    }`}
                                >
                                    <div className="flex items-center gap-2 mb-2">
                                        <div
                                            className="w-4 h-4 rounded-full border border-border"
                                            style={{
                                                backgroundColor: `color-mix(in oklch, ${getThemePreviewColor(theme)}, transparent 20%)`,
                                            }}
                                        />
                                        <span className="text-sm font-medium">{theme.name}</span>
                                    </div>
                                    {theme.description && (
                                        <p className="text-xs text-muted-foreground text-left">
                                            {theme.description}
                                        </p>
                                    )}
                                </button>
                            ))}
                        </div>
                    )}
                    
                    {!showThemes && (
                        <div className="flex items-center gap-2 p-3 bg-muted/50 rounded-lg">
                            <div
                                className="w-4 h-4 rounded-full border border-border"
                                style={{
                                    backgroundColor: `color-mix(in oklch, ${getThemePreviewColor(
                                        themes.find(t => t.id === themeId) || themes[0]
                                    )}, transparent 20%)`,
                                }}
                            />
                            <span className="text-sm">
                                Tema atual: <strong>{themes.find(t => t.id === themeId)?.name}</strong>
                            </span>
                        </div>
                    )}
                </div>
            </CardContent>
        </Card>
    );
}
