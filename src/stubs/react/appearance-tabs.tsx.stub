import { Appearance, useAppearance } from '@/hooks/use-appearance';
import { themes } from '@/lib/themes';
import { cn } from '@/lib/utils';
import { LucideIcon, Monitor, Moon, Palette, Sun } from 'lucide-react';
import { HTMLAttributes, useState } from 'react';

export default function AppearanceToggleTab({ className = '', ...props }: HTMLAttributes<HTMLDivElement>) {
    const { appearance, themeId, updateAppearance, updateTheme } = useAppearance();
    const [showThemes, setShowThemes] = useState(false);

    const tabs: { value: Appearance; icon: LucideIcon; label: string }[] = [
        { value: 'light', icon: Sun, label: 'Light' },
        { value: 'dark', icon: Moon, label: 'Dark' },
        { value: 'system', icon: Monitor, label: 'System' },
    ];

    return (
        <div className={cn('space-y-4', className)} {...props}>
            {/* Modo de Aparência */}
            <div>
                <label className="mb-2 block text-sm font-medium">Modo de Aparência</label>
                <div className="inline-flex gap-1 rounded-lg bg-neutral-100 p-1 dark:bg-neutral-800">
                    {tabs.map(({ value, icon: Icon, label }) => (
                        <button
                            key={value}
                            onClick={() => updateAppearance(value)}
                            className={cn(
                                'flex items-center rounded-md px-3.5 py-1.5 transition-colors',
                                appearance === value
                                    ? 'bg-white shadow-xs dark:bg-neutral-700 dark:text-neutral-100'
                                    : 'text-neutral-500 hover:bg-neutral-200/60 hover:text-black dark:text-neutral-400 dark:hover:bg-neutral-700/60',
                            )}
                        >
                            <Icon className="-ml-1 h-4 w-4" />
                            <span className="ml-1.5 text-sm">{label}</span>
                        </button>
                    ))}
                </div>
            </div>

            {/* Seletor de Temas */}
            <div>
                <div className="mb-2 flex items-center justify-between">
                    <label className="text-sm font-medium">Tema de Cores</label>
                    <button onClick={() => setShowThemes(!showThemes)} className="flex items-center gap-1 text-sm text-primary hover:text-primary/80">
                        <Palette className="h-4 w-4" />
                        {showThemes ? 'Ocultar' : 'Mostrar'}
                    </button>
                </div>

                {showThemes && (
                    <div className="grid grid-cols-1 gap-2">
                        {themes.map((theme) => (
                            <button
                                key={theme.id}
                                onClick={() => updateTheme(theme.id)}
                                className={cn(
                                    'flex items-center justify-between rounded-lg border p-3 text-left transition-colors',
                                    themeId === theme.id
                                        ? 'border-primary bg-primary/5 dark:bg-primary/10'
                                        : 'border-border hover:border-primary/50 hover:bg-accent/50',
                                )}
                            >
                                <div className="flex flex-col">
                                    <span className="text-sm font-medium">{theme.name}</span>
                                    {theme.description && <span className="text-xs text-muted-foreground">{theme.description}</span>}
                                </div>

                                {/* Preview de cores */}
                                <div className="flex gap-1">
                                    <div
                                        className="h-4 w-4 rounded-full border border-border"
                                        style={{ backgroundColor: theme.variables.light['--primary'] }}
                                    />
                                    <div
                                        className="h-4 w-4 rounded-full border border-border"
                                        style={{ backgroundColor: theme.variables.light['--secondary'] }}
                                    />
                                    <div
                                        className="h-4 w-4 rounded-full border border-border"
                                        style={{ backgroundColor: theme.variables.light['--accent'] }}
                                    />
                                </div>
                            </button>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}
