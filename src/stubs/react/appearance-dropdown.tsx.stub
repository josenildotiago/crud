import { Button } from '@/components/ui/button';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuSub,
    DropdownMenuSubContent,
    DropdownMenuSubTrigger,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useAppearance } from '@/hooks/use-appearance';
import { themes } from '@/lib/themes';
import { Check, Monitor, Moon, Palette, Sun } from 'lucide-react';
import { HTMLAttributes } from 'react';

export default function AppearanceToggleDropdown({ className = '', ...props }: HTMLAttributes<HTMLDivElement>) {
    const { appearance, themeId, updateAppearance, updateTheme } = useAppearance();

    const getCurrentIcon = () => {
        switch (appearance) {
            case 'dark':
                return <Moon className="h-5 w-5" />;
            case 'light':
                return <Sun className="h-5 w-5" />;
            default:
                return <Monitor className="h-5 w-5" />;
        }
    };

    return (
        <div className={className} {...props}>
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="icon" className="h-9 w-9 rounded-md">
                        {getCurrentIcon()}
                        <span className="sr-only">Alternar aparência e tema</span>
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                    <DropdownMenuLabel>Modo de Aparência</DropdownMenuLabel>
                    <DropdownMenuItem onClick={() => updateAppearance('light')}>
                        <span className="flex w-full items-center justify-between">
                            <span className="flex items-center gap-2">
                                <Sun className="h-4 w-4" />
                                Claro
                            </span>
                            {appearance === 'light' && <Check className="h-4 w-4 text-primary" />}
                        </span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => updateAppearance('dark')}>
                        <span className="flex w-full items-center justify-between">
                            <span className="flex items-center gap-2">
                                <Moon className="h-4 w-4" />
                                Escuro
                            </span>
                            {appearance === 'dark' && <Check className="h-4 w-4 text-primary" />}
                        </span>
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => updateAppearance('system')}>
                        <span className="flex w-full items-center justify-between">
                            <span className="flex items-center gap-2">
                                <Monitor className="h-4 w-4" />
                                Sistema
                            </span>
                            {appearance === 'system' && <Check className="h-4 w-4 text-primary" />}
                        </span>
                    </DropdownMenuItem>

                    <DropdownMenuSeparator />

                    <DropdownMenuSub>
                        <DropdownMenuSubTrigger>
                            <Palette className="mr-2 h-4 w-4" />
                            Temas
                        </DropdownMenuSubTrigger>
                        <DropdownMenuSubContent>
                            {themes.map((theme) => (
                                <DropdownMenuItem
                                    key={theme.id}
                                    onClick={() => updateTheme(theme.id)}
                                    className="flex cursor-pointer items-center justify-between"
                                >
                                    <div className="flex items-center gap-2">
                                        <div className="flex gap-1">
                                            <div
                                                className="h-3 w-3 rounded-full border border-border"
                                                style={{ backgroundColor: theme.variables.light['--primary'] }}
                                            />
                                            <div
                                                className="h-3 w-3 rounded-full border border-border"
                                                style={{ backgroundColor: theme.variables.light['--accent'] }}
                                            />
                                        </div>
                                        <span className="font-medium">{theme.name}</span>
                                    </div>
                                    {themeId === theme.id && <Check className="h-4 w-4 text-primary" />}
                                </DropdownMenuItem>
                            ))}
                        </DropdownMenuSubContent>
                    </DropdownMenuSub>
                </DropdownMenuContent>
            </DropdownMenu>
        </div>
    );
}
