import { useState, useEffect, useCallback } from 'react';
import { getTheme } from '@/lib/themes';

type Appearance = 'light' | 'dark' | 'system';

interface UseAppearanceReturn {
    appearance: Appearance;
    themeId: string;
    updateAppearance: (newAppearance: Appearance) => void;
    updateTheme: (newThemeId: string) => void;
}

// Helper functions
const getSystemTheme = (): 'light' | 'dark' => {
    if (typeof window === 'undefined') return 'light';
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
};

const getCookie = (name: string): string | null => {
    if (typeof document === 'undefined') return null;
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
    return null;
};

const setCookie = (name: string, value: string, days: number = 365): void => {
    if (typeof document === 'undefined') return;
    const expires = new Date(Date.now() + days * 864e5).toUTCString();
    document.cookie = `${name}=${value}; expires=${expires}; path=/; SameSite=Lax`;
};

const applyThemeVariables = (themeId: string, isDark: boolean): void => {
    const theme = getTheme(themeId);
    if (!theme) return;

    const variables = isDark ? theme.variables.dark : theme.variables.light;
    const root = document.documentElement;
    
    Object.entries(variables).forEach(([property, value]) => {
        root.style.setProperty(property, value);
    });
};

const applyTheme = (appearance: Appearance, themeId: string): void => {
    if (typeof document === 'undefined') return;

    const isDark = appearance === 'dark' || (appearance === 'system' && getSystemTheme() === 'dark');
    
    // Apply dark class
    if (isDark) {
        document.documentElement.classList.add('dark');
    } else {
        document.documentElement.classList.remove('dark');
    }
    
    // Apply theme variables
    applyThemeVariables(themeId, isDark);
};

export const initializeTheme = (): void => {
    if (typeof window === 'undefined') return;

    const savedAppearance = (localStorage.getItem('appearance') || getCookie('appearance') || 'system') as Appearance;
    const savedThemeId = localStorage.getItem('themeId') || getCookie('themeId') || 'default';
    
    applyTheme(savedAppearance, savedThemeId);
};

export function useAppearance(): UseAppearanceReturn {
    const [appearance, setAppearance] = useState<Appearance>(() => {
        if (typeof window === 'undefined') return 'system';
        return (localStorage.getItem('appearance') || getCookie('appearance') || 'system') as Appearance;
    });

    const [themeId, setThemeId] = useState<string>(() => {
        if (typeof window === 'undefined') return 'default';
        return localStorage.getItem('themeId') || getCookie('themeId') || 'default';
    });

    const updateAppearance = useCallback((newAppearance: Appearance) => {
        setAppearance(newAppearance);
        localStorage.setItem('appearance', newAppearance);
        setCookie('appearance', newAppearance);
        applyTheme(newAppearance, themeId);
    }, [themeId]);

    const updateTheme = useCallback((newThemeId: string) => {
        setThemeId(newThemeId);
        localStorage.setItem('themeId', newThemeId);
        setCookie('themeId', newThemeId);
        applyTheme(appearance, newThemeId);
    }, [appearance]);

    useEffect(() => {
        applyTheme(appearance, themeId);
    }, [appearance, themeId]);

    useEffect(() => {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const handleChange = () => {
            if (appearance === 'system') {
                applyTheme(appearance, themeId);
            }
        };

        mediaQuery.addEventListener('change', handleChange);
        return () => mediaQuery.removeEventListener('change', handleChange);
    }, [appearance, themeId]);

    return {
        appearance,
        themeId,
        updateAppearance,
        updateTheme,
    };
}
