import { getDefaultTheme, getTheme, type ThemeConfig } from '@/lib/themes';
import { useCallback, useEffect, useState } from 'react';

export type Appearance = 'light' | 'dark' | 'system';

const prefersDark = () => {
    if (typeof window === 'undefined') {
        return false;
    }

    return window.matchMedia('(prefers-color-scheme: dark)').matches;
};

const setCookie = (name: string, value: string, days = 365) => {
    if (typeof document === 'undefined') {
        return;
    }

    const maxAge = days * 24 * 60 * 60;
    document.cookie = `${name}=${value};path=/;max-age=${maxAge};SameSite=Lax`;
};

const applyThemeVariables = (theme: ThemeConfig, isDark: boolean) => {
    const variables = isDark ? theme.variables.dark : theme.variables.light;
    const root = document.documentElement;

    Object.entries(variables).forEach(([property, value]) => {
        root.style.setProperty(property, value);
    });
};

const applyTheme = (appearance: Appearance, themeId?: string) => {
    const isDark = appearance === 'dark' || (appearance === 'system' && prefersDark());

    document.documentElement.classList.toggle('dark', isDark);

    // Aplicar variÃ¡veis do tema
    const theme = themeId ? getTheme(themeId) : getDefaultTheme();
    if (theme) {
        applyThemeVariables(theme, isDark);
    }
};

const mediaQuery = () => {
    if (typeof window === 'undefined') {
        return null;
    }

    return window.matchMedia('(prefers-color-scheme: dark)');
};

const handleSystemThemeChange = () => {
    const currentAppearance = localStorage.getItem('appearance') as Appearance;
    const currentThemeId = localStorage.getItem('themeId');
    applyTheme(currentAppearance || 'system', currentThemeId || undefined);
};

export function initializeTheme() {
    const savedAppearance = (localStorage.getItem('appearance') as Appearance) || 'system';
    const savedThemeId = localStorage.getItem('themeId');

    applyTheme(savedAppearance, savedThemeId || undefined);

    // Add the event listener for system theme changes...
    mediaQuery()?.addEventListener('change', handleSystemThemeChange);
}

export function useAppearance() {
    const [appearance, setAppearance] = useState<Appearance>('system');
    const [themeId, setThemeId] = useState<string>('default');

    const updateAppearance = useCallback(
        (mode: Appearance) => {
            setAppearance(mode);

            // Store in localStorage for client-side persistence...
            localStorage.setItem('appearance', mode);

            // Store in cookie for SSR...
            setCookie('appearance', mode);

            applyTheme(mode, themeId);
        },
        [themeId],
    );

    const updateTheme = useCallback(
        (newThemeId: string) => {
            setThemeId(newThemeId);

            // Store in localStorage for client-side persistence...
            localStorage.setItem('themeId', newThemeId);

            // Store in cookie for SSR...
            setCookie('themeId', newThemeId);

            applyTheme(appearance, newThemeId);
        },
        [appearance],
    );

    useEffect(() => {
        const savedAppearance = localStorage.getItem('appearance') as Appearance | null;
        const savedThemeId = localStorage.getItem('themeId') || 'default';

        setAppearance(savedAppearance || 'system');
        setThemeId(savedThemeId);

        applyTheme(savedAppearance || 'system', savedThemeId);

        return () => mediaQuery()?.removeEventListener('change', handleSystemThemeChange);
    }, []);

    return { appearance, themeId, updateAppearance, updateTheme } as const;
}
