import React from 'react';
import { useTheme } from '@/hooks/use-appearance';

interface FormFieldProps {
    label: string;
    name: string;
    type?: 'text' | 'email' | 'number' | 'password' | 'url' | 'tel' | 'date' | 'datetime-local' | 'time' | 'textarea' | 'select' | 'checkbox' | 'radio';
    value: any;
    onChange: (value: any) => void;
    error?: string;
    required?: boolean;
    placeholder?: string;
    options?: Array<{ value: any; label: string }>;
    rows?: number;
    className?: string;
    disabled?: boolean;
}

export default function FormField({
    label,
    name,
    type = 'text',
    value,
    onChange,
    error,
    required = false,
    placeholder,
    options = [],
    rows = 3,
    className = '',
    disabled = false,
}: FormFieldProps) {
    const { theme } = useTheme();

    const baseInputClasses = `
        block w-full border-gray-300 dark:border-gray-700 
        dark:bg-gray-900 dark:text-gray-300 
        focus:border-blue-500 dark:focus:border-blue-600 
        focus:ring-blue-500 dark:focus:ring-blue-600 
        rounded-md shadow-sm disabled:opacity-50 disabled:cursor-not-allowed
        ${error ? 'border-red-500 dark:border-red-400' : ''}
        ${className}
    `;

    const renderInput = () => {
        switch (type) {
            case 'textarea':
                return (
                    <textarea
                        id={name}
                        name={name}
                        value={value || ''}
                        onChange={(e) => onChange(e.target.value)}
                        placeholder={placeholder}
                        required={required}
                        disabled={disabled}
                        rows={rows}
                        className={baseInputClasses}
                    />
                );

            case 'select':
                return (
                    <select
                        id={name}
                        name={name}
                        value={value || ''}
                        onChange={(e) => onChange(e.target.value)}
                        required={required}
                        disabled={disabled}
                        className={baseInputClasses}
                    >
                        <option value="">Selecione uma opção</option>
                        {options.map((option) => (
                            <option key={option.value} value={option.value}>
                                {option.label}
                            </option>
                        ))}
                    </select>
                );

            case 'checkbox':
                return (
                    <div className="flex items-center">
                        <input
                            id={name}
                            name={name}
                            type="checkbox"
                            checked={!!value}
                            onChange={(e) => onChange(e.target.checked)}
                            disabled={disabled}
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                        />
                        <label htmlFor={name} className="ml-2 block text-sm text-gray-900 dark:text-gray-100">
                            {label}
                            {required && <span className="text-red-500 ml-1">*</span>}
                        </label>
                    </div>
                );

            case 'radio':
                return (
                    <fieldset>
                        <legend className="sr-only">{label}</legend>
                        <div className="space-y-2">
                            {options.map((option) => (
                                <div key={option.value} className="flex items-center">
                                    <input
                                        id={`${name}-${option.value}`}
                                        name={name}
                                        type="radio"
                                        value={option.value}
                                        checked={value === option.value}
                                        onChange={(e) => onChange(e.target.value)}
                                        disabled={disabled}
                                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed"
                                    />
                                    <label htmlFor={`${name}-${option.value}`} className="ml-2 block text-sm text-gray-900 dark:text-gray-100">
                                        {option.label}
                                    </label>
                                </div>
                            ))}
                        </div>
                    </fieldset>
                );

            case 'number':
                return (
                    <input
                        id={name}
                        name={name}
                        type="number"
                        value={value || ''}
                        onChange={(e) => onChange(e.target.value)}
                        placeholder={placeholder}
                        required={required}
                        disabled={disabled}
                        className={baseInputClasses}
                        step="any"
                    />
                );

            default:
                return (
                    <input
                        id={name}
                        name={name}
                        type={type}
                        value={value || ''}
                        onChange={(e) => onChange(e.target.value)}
                        placeholder={placeholder}
                        required={required}
                        disabled={disabled}
                        className={baseInputClasses}
                    />
                );
        }
    };

    // For checkbox and radio, we handle the label differently
    if (type === 'checkbox') {
        return (
            <div className="space-y-2">
                {renderInput()}
                {error && (
                    <p className="text-sm text-red-600 dark:text-red-400">
                        {error}
                    </p>
                )}
            </div>
        );
    }

    return (
        <div className="space-y-2">
            <label htmlFor={name} className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {label}
                {required && <span className="text-red-500 ml-1">*</span>}
            </label>
            {renderInput()}
            {error && (
                <p className="text-sm text-red-600 dark:text-red-400">
                    {error}
                </p>
            )}
        </div>
    );
}

// Helper component for file uploads
interface FileUploadProps {
    label: string;
    name: string;
    onChange: (file: File | null) => void;
    error?: string;
    required?: boolean;
    accept?: string;
    multiple?: boolean;
    className?: string;
    disabled?: boolean;
}

export function FileUpload({
    label,
    name,
    onChange,
    error,
    required = false,
    accept,
    multiple = false,
    className = '',
    disabled = false,
}: FileUploadProps) {
    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (multiple) {
            onChange(files ? Array.from(files) : null);
        } else {
            onChange(files ? files[0] : null);
        }
    };

    return (
        <div className={`space-y-2 ${className}`}>
            <label htmlFor={name} className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {label}
                {required && <span className="text-red-500 ml-1">*</span>}
            </label>
            <input
                id={name}
                name={name}
                type="file"
                onChange={handleFileChange}
                required={required}
                disabled={disabled}
                accept={accept}
                multiple={multiple}
                className="block w-full text-sm text-gray-900 dark:text-gray-100 border border-gray-300 dark:border-gray-700 rounded-lg cursor-pointer bg-gray-50 dark:bg-gray-700 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed"
            />
            {error && (
                <p className="text-sm text-red-600 dark:text-red-400">
                    {error}
                </p>
            )}
        </div>
    );
}

// Helper component for rich text editing (basic)
interface RichTextEditorProps {
    label: string;
    name: string;
    value: string;
    onChange: (value: string) => void;
    error?: string;
    required?: boolean;
    placeholder?: string;
    className?: string;
    disabled?: boolean;
}

export function RichTextEditor({
    label,
    name,
    value,
    onChange,
    error,
    required = false,
    placeholder,
    className = '',
    disabled = false,
}: RichTextEditorProps) {
    return (
        <div className={`space-y-2 ${className}`}>
            <label htmlFor={name} className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {label}
                {required && <span className="text-red-500 ml-1">*</span>}
            </label>
            
            {/* Basic toolbar */}
            <div className="border border-gray-300 dark:border-gray-700 rounded-t-md bg-gray-50 dark:bg-gray-800 px-3 py-2">
                <div className="flex space-x-2">
                    <button
                        type="button"
                        onClick={() => document.execCommand('bold')}
                        disabled={disabled}
                        className="px-2 py-1 text-sm bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-600 disabled:opacity-50"
                        title="Negrito"
                    >
                        <strong>B</strong>
                    </button>
                    <button
                        type="button"
                        onClick={() => document.execCommand('italic')}
                        disabled={disabled}
                        className="px-2 py-1 text-sm bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-600 disabled:opacity-50"
                        title="Itálico"
                    >
                        <em>I</em>
                    </button>
                    <button
                        type="button"
                        onClick={() => document.execCommand('underline')}
                        disabled={disabled}
                        className="px-2 py-1 text-sm bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-600 disabled:opacity-50"
                        title="Sublinhado"
                    >
                        <u>U</u>
                    </button>
                </div>
            </div>
            
            <div
                contentEditable={!disabled}
                onInput={(e) => onChange(e.currentTarget.innerHTML)}
                dangerouslySetInnerHTML={{ __html: value }}
                className="block w-full min-h-[100px] p-3 border border-gray-300 dark:border-gray-700 border-t-0 rounded-b-md bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                style={{ outline: 'none' }}
            />
            
            {error && (
                <p className="text-sm text-red-600 dark:text-red-400">
                    {error}
                </p>
            )}
        </div>
    );
}
