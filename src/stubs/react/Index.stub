import React from 'react';
import { Head, Link, router } from '@inertiajs/react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Checkbox } from '@/components/ui/checkbox';
import AppLayout from '@/layouts/app-layout';
import { {{modelName}} } from '@/types';
import { LoaderCircle, PlusIcon, Search, TrashIcon } from 'lucide-react';
{{themeImports}}

interface Props {
    {{modelNamePluralLowerCase}}: {
        data: {{modelName}}[];
        links: any[];
        meta: any;
    };
    filters: {
        search?: string;
    };
}

export default function Index({ {{modelNamePluralLowerCase}}, filters }: Props) {
    const [search, setSearch] = React.useState(filters.search || '');
    const [selectedIds, setSelectedIds] = React.useState<number[]>([]);
    const [isDeleting, setIsDeleting] = React.useState(false);
    
    const breadcrumbs = [
        {
            title: 'Dashboard',
            href: '/dashboard',
        },
        {
            title: '{{modelTitlePlural}}',
            href: '/{{modelRoutePlural}}',
        },
    ];

    const handleSearch = (e: React.FormEvent) => {
        e.preventDefault();
        router.get(route('{{modelRoute}}.index'), { search }, {
            preserveState: true,
            replace: true,
        });
    };

    const handleBulkDelete = async () => {
        if (selectedIds.length === 0) return;
        
        if (confirm(`Tem certeza que deseja deletar ${selectedIds.length} registros?`)) {
            setIsDeleting(true);
            router.delete(route('{{modelRoute}}.bulk-destroy'), {
                data: { ids: selectedIds },
                onSuccess: () => {
                    setSelectedIds([]);
                    setIsDeleting(false);
                },
                onError: () => setIsDeleting(false),
            });
        }
    };

    const handleSingleDelete = (id: number) => {
        if (confirm('Tem certeza que deseja deletar este registro?')) {
            router.delete(route('{{modelRoute}}.destroy', id));
        }
    };

    const toggleSelection = (id: number) => {
        setSelectedIds(prev => 
            prev.includes(id) 
                ? prev.filter(selectedId => selectedId !== id)
                : [...prev, id]
        );
    };

    const toggleAll = () => {
        if (selectedIds.length === {{modelNamePluralLowerCase}}.data.length) {
            setSelectedIds([]);
        } else {
            setSelectedIds({{modelNamePluralLowerCase}}.data.map(item => item.id));
        }
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="{{modelTitlePlural}}" />
            
            <div className="container mx-auto py-8">
                <Card>
                    <CardHeader>
                        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                            <CardTitle className="uppercase">{{modelTitlePlural}}</CardTitle>
                            
                            <div className="flex items-center gap-4">
                                <Link href={route('{{modelRoute}}.create')}>
                                    <Button className="flex items-center gap-2">
                                        <PlusIcon className="w-4 h-4" />
                                        Novo {{modelTitle}}
                                    </Button>
                                </Link>
                                
                                {selectedIds.length > 0 && (
                                    <Button
                                        variant="destructive"
                                        onClick={handleBulkDelete}
                                        disabled={isDeleting}
                                        className="flex items-center gap-2"
                                    >
                                        {isDeleting ? (
                                            <LoaderCircle className="w-4 h-4 animate-spin" />
                                        ) : (
                                            <TrashIcon className="w-4 h-4" />
                                        )}
                                        Deletar ({selectedIds.length})
                                    </Button>
                                )}
                            </div>
                        </div>
                        
                        {/* Search Form */}
                        <form onSubmit={handleSearch} className="flex items-center gap-2 mt-4">
                            <div className="relative flex-1 max-w-sm">
                                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                                <Input
                                    type="text"
                                    value={search}
                                    onChange={(e) => setSearch(e.target.value)}
                                    placeholder="Buscar {{modelNameLowerCase}}s..."
                                    className="pl-10"
                                />
                            </div>
                            <Button type="submit" variant="outline">
                                Buscar
                            </Button>
                        </form>
                    </CardHeader>
                    
                    <CardContent>
                        <div className="rounded-md border">
                            <Table>
                                <TableHeader>
                                    <TableRow>
                                        <TableHead className="w-12">
                                            <Checkbox
                                                checked={selectedIds.length === {{modelNamePluralLowerCase}}.data.length && {{modelNamePluralLowerCase}}.data.length > 0}
                                                onCheckedChange={toggleAll}
                                            />
                                        </TableHead>
{{tableHeaders}}
                                        <TableHead>Ações</TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {{{modelNamePluralLowerCase}}.data.length > 0 ? (
                                        {{modelNamePluralLowerCase}}.data.map(({{modelNameLowerCase}}) => (
                                            <TableRow key={{{modelNameLowerCase}}.id}>
                                                <TableCell>
                                                    <Checkbox
                                                        checked={selectedIds.includes({{modelNameLowerCase}}.id)}
                                                        onCheckedChange={() => toggleSelection({{modelNameLowerCase}}.id)}
                                                    />
                                                </TableCell>
{{tableCells}}
                                                <TableCell>
                                                    <div className="flex items-center gap-2">
                                                        <Link href={route('{{modelRoute}}.show', {{modelNameLowerCase}}.id)}>
                                                            <Button variant="outline" size="sm">
                                                                Ver
                                                            </Button>
                                                        </Link>
                                                        <Link href={route('{{modelRoute}}.edit', {{modelNameLowerCase}}.id)}>
                                                            <Button variant="outline" size="sm">
                                                                Editar
                                                            </Button>
                                                        </Link>
                                                        <Button
                                                            variant="outline"
                                                            size="sm"
                                                            onClick={() => handleSingleDelete({{modelNameLowerCase}}.id)}
                                                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                                                        >
                                                            Deletar
                                                        </Button>
                                                    </div>
                                                </TableCell>
                                            </TableRow>
                                        ))
                                    ) : (
                                        <TableRow>
                                            <TableCell colSpan={{{colSpan}}} className="text-center py-8 text-gray-500">
                                                Nenhum {{modelNameLowerCase}} encontrado.
                                            </TableCell>
                                        </TableRow>
                                    )}
                                </TableBody>
                            </Table>
                        </div>
                        
                        {/* Pagination */}
                        {{{modelNamePluralLowerCase}}.links && {{modelNamePluralLowerCase}}.links.length > 3 && (
                            <div className="mt-6 flex justify-center">
                                <div className="flex items-center gap-2">
                                    {{{modelNamePluralLowerCase}}.links.map((link, index) => (
                                        <Button
                                            key={index}
                                            variant={link.active ? "default" : "outline"}
                                            size="sm"
                                            onClick={() => {
                                                if (link.url) {
                                                    router.visit(link.url);
                                                }
                                            }}
                                            disabled={!link.url}
                                            dangerouslySetInnerHTML={{ __html: link.label }}
                                        />
                                    ))}
                                </div>
                            </div>
                        )}
                    </CardContent>
                </Card>
            </div>
        </AppLayout>
    );
}
