import * as React from 'react';
import { Button } from '@/components/ui/button';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuSeparator,
    DropdownMenuSub,
    DropdownMenuSubContent,
    DropdownMenuSubTrigger,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Moon, Sun, Monitor, Palette, Settings } from 'lucide-react';
import { useAppearance } from '@/hooks/use-appearance';
import { themes } from '@/lib/themes';

export default function AppearanceAndThemeSelector() {
    const { appearance, themeId, updateAppearance, updateTheme } = useAppearance();

    const getThemePreviewColor = (theme: typeof themes[0]) => {
        const primaryColor = theme.variables.light['--primary'];
        return primaryColor;
    };

    const appearanceIcons = {
        light: Sun,
        dark: Moon,
        system: Monitor,
    };

    const CurrentIcon = appearanceIcons[appearance];
    const currentTheme = themes.find(t => t.id === themeId);

    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="gap-2">
                    <CurrentIcon className="h-4 w-4" />
                    <div
                        className="w-3 h-3 rounded-full border border-border"
                        style={{
                            backgroundColor: currentTheme ? 
                                `color-mix(in oklch, ${getThemePreviewColor(currentTheme)}, transparent 20%)` : 
                                'transparent',
                        }}
                    />
                    <Settings className="h-3 w-3" />
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
                <div className="px-2 py-1.5 text-sm font-semibold">Aparência</div>
                <DropdownMenuItem onClick={() => updateAppearance('light')}>
                    <Sun className="mr-2 h-4 w-4" />
                    <span>Modo Claro</span>
                    {appearance === 'light' && <span className="ml-auto">✓</span>}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => updateAppearance('dark')}>
                    <Moon className="mr-2 h-4 w-4" />
                    <span>Modo Escuro</span>
                    {appearance === 'dark' && <span className="ml-auto">✓</span>}
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => updateAppearance('system')}>
                    <Monitor className="mr-2 h-4 w-4" />
                    <span>Seguir Sistema</span>
                    {appearance === 'system' && <span className="ml-auto">✓</span>}
                </DropdownMenuItem>
                
                <DropdownMenuSeparator />
                
                <DropdownMenuSub>
                    <DropdownMenuSubTrigger>
                        <Palette className="mr-2 h-4 w-4" />
                        <span>Temas de Cores</span>
                    </DropdownMenuSubTrigger>
                    <DropdownMenuSubContent className="w-52">
                        <div className="px-2 py-1.5 text-sm font-semibold">Escolher Tema</div>
                        {themes.map((theme) => (
                            <DropdownMenuItem
                                key={theme.id}
                                onClick={() => updateTheme(theme.id)}
                                className="flex items-center gap-3"
                            >
                                <div
                                    className="w-4 h-4 rounded-full border border-border flex-shrink-0"
                                    style={{
                                        backgroundColor: `color-mix(in oklch, ${getThemePreviewColor(theme)}, transparent 20%)`,
                                    }}
                                />
                                <div className="flex-1 min-w-0">
                                    <div className="font-medium">{theme.name}</div>
                                    {theme.description && (
                                        <div className="text-xs text-muted-foreground truncate">
                                            {theme.description}
                                        </div>
                                    )}
                                </div>
                                {themeId === theme.id && <span className="ml-auto text-xs">✓</span>}
                            </DropdownMenuItem>
                        ))}
                    </DropdownMenuSubContent>
                </DropdownMenuSub>
            </DropdownMenuContent>
        </DropdownMenu>
    );
}
