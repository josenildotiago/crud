<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class {{modelName}}Resource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
{{#each columns}}
            '{{name}}' => {{#if (eq type 'date')}}$this->{{name}}?->format('Y-m-d'){{else if (eq type 'datetime')}}$this->{{name}}?->format('Y-m-d H:i:s'){{else if (eq type 'decimal' 'float' 'double')}}$this->{{name}} ? (float) $this->{{name}} : null{{else if (eq type 'integer')}}$this->{{name}} ? (int) $this->{{name}} : null{{else if (eq type 'boolean')}}(bool) $this->{{name}}{{else}}$this->{{name}}{{/if}},
{{/each}}
            
            // Relationships
{{#each relations}}
            '{{name}}' => {{#if (eq type 'belongsTo')}}$this->whenLoaded('{{name}}', function () {
                return new {{relatedResourceName}}($this->{{name}});
            }){{else if (eq type 'hasMany' 'belongsToMany')}}$this->whenLoaded('{{name}}', function () {
                return {{relatedResourceName}}::collection($this->{{name}});
            }){{else}}$this->whenLoaded('{{name}}'){{/if}},
{{/each}}

            // Computed attributes
{{#each computedAttributes}}
            '{{name}}' => $this->{{accessor}},
{{/each}}

            // Timestamps
            'created_at' => $this->created_at?->format('Y-m-d H:i:s'),
            'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),
            
            // Formatted dates for display
            'created_at_human' => $this->created_at?->diffForHumans(),
            'updated_at_human' => $this->updated_at?->diffForHumans(),
            
            // Additional meta information
            'can' => [
                'view' => $request->user()?->can('view', $this->resource) ?? false,
                'update' => $request->user()?->can('update', $this->resource) ?? false,
                'delete' => $request->user()?->can('delete', $this->resource) ?? false,
            ],
        ];
    }

    /**
     * Get additional data that should be returned with the resource array.
     *
     * @return array<string, mixed>
     */
    public function with(Request $request): array
    {
        return [
            'meta' => [
                'resource' => '{{modelName}}',
                'version' => '1.0',
            ],
        ];
    }
}
